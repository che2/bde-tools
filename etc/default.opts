# BDE default options file
#
# DESCRIPTION
#
# This file provides the default options for all builds. It may be overidden
# on a group- or package-level basis by placing a file with the name
# of the group or package plus the suffix '.opts' in the relevant 'group' or
# 'package' subdirectory.
#
# Options that should be inherited by higher level package groups or
# stand-alone libraries can be placed into a '.defs' file instead -- see
# bsl.defs for an example. The syntax of a '.defs' file is identical to that of
# an '.opts' file.
#
# SYNTAX
#
# Please see the 'Options File Format' section of the
# 'doc/bde_repo.rst'.

#==============================================================================
# Metadata
#==============================================================================

++  *  _        BUILD_TYPE      =
++  *  dbg      BUILD_TYPE      =  -DBDE_BUILD_TARGET_DBG

++  *  _        EXC_BUILD_TYPE  =  -DBDE_BUILD_TARGET_NO_EXC
!!  *  exc      EXC_BUILD_TYPE  =  -DBDE_BUILD_TARGET_EXC

# Note that if BDE_BUILD_TARGET_NO_EXC is NOT defined, bsls_buildtarget.h will
# define BDE_BUILD_TARGET_EXC.

++  *  _        BUILD_TYPE      =  $(EXC_BUILD_TYPE)

++  *  ndebug   BUILD_TYPE      =  -DBDE_BUILD_TARGET_NDEBUG
++  *  mt       BUILD_TYPE      =  -DBDE_BUILD_TARGET_MT
++  *  opt      BUILD_TYPE      =  -DBDE_BUILD_TARGET_OPT
++  *  shr      BUILD_TYPE      =  -DBDE_BUILD_TARGET_SHR
++  *  win      BUILD_TYPE      =  -DBDE_BUILD_TARGET_WINDOWED
++  *  safe     BUILD_TYPE      =  -DBDE_BUILD_TARGET_SAFE
++  *  safe2    BUILD_TYPE      =  -DBDE_BUILD_TARGET_SAFE_2
++  *  stlport  BUILD_TYPE      =  -DBDE_BUILD_TARGET_STLPORT
++  *  cpp11    BUILD_TYPE      =  -DBDE_BUILD_TARGET_CPP11

++  *  _        BDE_CFLAGS      =  $(BUILD_TYPE)
++  *  _        BDE_CXXFLAGS    =  $(BUILD_TYPE)

# Portable linker symbols

!!  unix-*        _  BDE_STATIC   =  -Bstatic
!!  unix-aix-*    _  BDE_STATIC   =  -bstatic
!!  unix-linux-*  _  BDE_STATIC   =
!!  windows-*     _  BDE_STATIC   =

!!  unix-*        _  BDE_DYNAMIC  =  -Bdynamic
!!  unix-aix-*    _  BDE_DYNAMIC  =  -bdynamic
!!  unix-linux-*  _  BDE_DYNAMIC  =
!!  windows-*     _  BDE_DYNAMIC  =

# The default command line option separator.  It's '-' on most platforms,
# and '/' on windows.

++  *        _  SWITCHCHAR    =  -
!!  windows  _  SWITCHCHAR    =  /

# Flag to add a directory to the include path for compilation step

!!  *        _  INCPATH_FLAG  =  $(SWITCHCHAR)I

#==============================================================================
# C++11 (a.k.a. C++0x) support
#==============================================================================

++  *                     cpp11  CPP11_FLAGS   =  --this-compiler-does-not-have-cpp11-support-configured
!!  unix-*-*-*-gcc-4.4.3  cpp11  CPP11_FLAGS   =  -std=c++0x
!!  unix-*-*-*-gcc-4.7.0  cpp11  CPP11_FLAGS   =  -std=c++11
!!  unix-*-*-*-clang      cpp11  CPP11_FLAGS   =  -std=c++11
++  *                     cpp11  BDE_CXXFLAGS  =  $(CPP11_FLAGS)


#==============================================================================
# C++14 support
#==============================================================================

++  *                     cpp14  CPP14_FLAGS   =  --this-compiler-does-not-have-cpp11-support-configured
!!  unix-*-*-*-gcc-4.7.0  cpp14  CPP14_FLAGS   =  -std=c++14
!!  unix-*-*-*-clang      cpp14  CPP14_FLAGS   =  -std=c++14
++  *                     cpp14  BDE_CXXFLAGS  =  $(CPP14_FLAGS)

#==============================================================================
# FLAGS: BDE_CFLAGS, BDE_CXXFLAGS, BDE_LDFLAGS
#==============================================================================

# Initial (target non-specific) values

++  *                       _     DEF_CFLAGS          =
++  *                       _     DEF_CXXFLAGS        =
++  *                       _     DEF_LDFLAGS         =
++  *                       _     DEF_ENDLFGLAGS      =

# Special macros for extra includes, handled separately to allow pre-ordering
# (-I overrides if seen first, other flags override if seen last) C and C++
# (not Fortran)

++  *                       _     DEF_INCLUDE         =
++  *                       _     DEF_CINCLUDE        =
++  *                       _     DEF_CXXINCLUDE      =

#===

++  unix-*-*-*-gcc          _     DEF_CFLAGS          =  -std=gnu99
++  unix-*-*-*-clang        _     DEF_CFLAGS          =  -std=gnu99
++  unix-*                  _     DEF_CFLAGS          =  -I$(DEPLOYED_INCLUDE)

# DRQS 57720228: switch to target=generic.
!!  unix-sunos-*-*-cc-5.9   _     DEF_CXXFLAGS        =  -m32 -xtarget=generic
!!  unix-sunos-*-*-cc-5.9   64    DEF_CXXFLAGS        =  -m64 -xtarget=generic
!!  unix-aix-*-*-xlc-*      _     AIX_UNLOCK_STREAMS  =  -D__NOLOCK_ON_INPUT -D__NOLOCK_ON_OUTPUT
!!  unix-aix-*-*-xlc-10.0   _     DEF_CXXFLAGS        =  $(ARCH_TUNE) -qnotempinc -qfuncsect -qtbtable=small -qrtti=all -qsuppress=1500-029 -qsuppress=1540-2910 -qsuppress=1501-201 -qxflag=tocrel -qxflag=dircache:71,100 $(ENABLE_TLS) $(AIX_UNLOCK_STREAMS)

# inline rather than inline and optimize
!!  *                       _     CMP_TUNE            =
!!  unix-*-*-*-gcc          _     CMP_TUNE            =  --param ggc-min-expand=30
!!  unix-*-*-*-gcc          _     DEF_CXXFLAGS        =  $(CMP_TUNE)
!!  unix-*-*-*-clang        _     DEF_CXXFLAGS        =
!!  unix-sunos-*-*-gcc      _     DEF_CXXFLAGS        =  $(CMP_TUNE) -mcpu=niagara2

# DRQS 29544311 - some .so's linking against BCE and BAE fail unless the sources are built
# with -xthreadvar=dynamic
++  unix-sunos-*-*-cc       mt    DEF_CXXFLAGS        =  -xthreadvar=dynamic

# DRQS 40501760 - Studio 11 requires -xannotate=no
++  unix-sunos-*-*-cc-5.11  _     DEF_CXXFLAGS        =  -xannotate=no

# For MSVC compiler, disable warning 4661 which warns of functions with no
# bodies (e.g. private copy constructors) in explicitly instantiated class
# templates.
!!  windows-*-*-*-cl        _     DEF_CXXFLAGS        =  /wd4661 /GR

# Pre-WindowsXP versions no longer supported.
!!  windows-*-*-*-cl-*  _  WIN_VERSION_FLAGS  =  /D_WIN32_WINNT=0x0502 /DWINVER=0x0502

!!  windows-*-*-*-*-*        _  NOGDI              =  /DNOGDI
!!  windows-*-*-*-cl-15.00   _  DEF_CFLAGS         =  /nologo /Oi /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) $(WIN_VERSION_FLAGS)
!!  windows-*-*-*-cl-15.00   _  DEF_CXXFLAGS       =  /nologo /Oi /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) /GR /wd4661 /we4150 /wd4510 /wd4610 $(WIN_VERSION_FLAGS)
++  windows-*-*-*-cl-18.00   _  DEF_CFLAGS         =  /FS
++  windows-*-*-*-cl-18.00   _  DEF_CXXFLAGS       =  /FS


# DRQS 13597546 - add -bmaxdata:0x5000000 to work around new exception issues
# and match our production setup
!!  unix-aix-*              _     DEF_LDFLAGS         =  -qstaticinit=ld -qtwolink -bh:5 -bmaxdata:0x50000000 $(XLC_SPECIAL_BBINDER_FLAGS) $(ARCH_TUNE)
!!  unix-aix-*-*-gcc        _     DEF_LDFLAGS         =
++  unix-aix-*-*-xlc        64    DEF_LDFLAGS         =  -b64

# some POSIX API is provided in librt on Linux
++  unix-linux-*-*-*        _     DEF_ENDLDFLAGS      =  -lrt

# gcc 4.8+ libatomic required for 8-byte atomics on Linux on POWER in 32-bit
# (or compiling 32-bit with -m32 -mpowerpc64, but -m32 -mpowerpc64 has a bug:
#  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64505)
# libatomic in gcc 4.8, not gcc 4.7  (https://gcc.gnu.org/wiki/Atomic/GCCMM)
!!  unix-linux-powerpc-*-gcc-4.8 _  LIBATOMIC           =  -latomic
!!  unix-linux-powerpc-*-gcc-4.8 64 LIBATOMIC           =
++  unix-linux-powerpc-*-gcc-4.8 _  DEF_ENDLDFLAGS      =  $(LIBATOMIC)

#===

++  *                       _     BDE_INCLUDE         =  $(DEF_INCLUDE)
++  *                       _     BDE_CINCLUDE        =  $(DEF_CINCLUDE)
++  *                       _     BDE_CXXINCLUDE      =  $(DEF_CXXINCLUDE)
++  *                       _     BDE_CFLAGS          =  $(DEF_CFLAGS)
++  *                       _     BDE_CXXFLAGS        =  $(DEF_CXXFLAGS)
++  *                       _     BDE_LDFLAGS         =  $(DEF_LDFLAGS)
++  *                       _     BDE_ENDLDFLAGS      =  $(DEF_ENDLDFLAGS)

++  unix-                   _     BDE_LDFLAGS         =  $(INTERNAL_LDFLAGS)

#==============================================================================
# Exception support - non-exceptions is default, so must override for exc
#==============================================================================

++  *                 _    EXC_CXXFLAGS  =
!!  unix-sunos-*-*-*  _    EXC_CXXFLAGS  =  -features=no%except
!!  unix-sunos-*-*-*  exc  EXC_CXXFLAGS  =  -features=except
!!  unix-aix-*-*-*    _    EXC_CXXFLAGS  =  -qnoeh
!!  unix-aix-*-*-*    exc  EXC_CXXFLAGS  =  -qeh -qlanglvl=newexcp
!!  unix-*-*-*-gcc    _    EXC_CXXFLAGS  =  -fno-exceptions
!!  unix-*-*-*-clang  _    EXC_CXXFLAGS  =  -fno-exceptions
!!  unix-*-*-*-gcc    exc  EXC_CXXFLAGS  =  -fexceptions
!!  unix-*-*-*-clang  exc  EXC_CXXFLAGS  =  -fexceptions
# /EHsc is equivalent to /GX and supported since a least VC2003
!!  windows-          exc  EXC_CXXFLAGS  =  /EHsc

++  *                 _    BDE_CXXFLAGS  =  $(EXC_CXXFLAGS)

#==============================================================================
# Safe builds
#==============================================================================

# Prevent ambiguity for operators in safe mode:
!!  *        safe   SAFE_CXXFLAGS  =  -D_STLP_EXTRA_OPERATORS_FOR_DEBUG=1
!!  windows  safe   SAFE_CXXFLAGS  =  /D"_STLP_EXTRA_OPERATORS_FOR_DEBUG"
!!  *        safe2  SAFE_CXXFLAGS  =  -D_STLP_EXTRA_OPERATORS_FOR_DEBUG=1
!!  windows  safe2  SAFE_CXXFLAGS  =  /D"_STLP_EXTRA_OPERATORS_FOR_DEBUG"

# Prevent transitive includes in safe mode (DRQS 30168600):
++  *        safe   SAFE_CXXFLAGS  =  $(SWITCHCHAR)DBDE_DONT_ALLOW_TRANSITIVE_INCLUDES
++  *        safe2  SAFE_CXXFLAGS  =  $(SWITCHCHAR)DBDE_DONT_ALLOW_TRANSITIVE_INCLUDES

#===

++  *        _      BDE_CXXFLAGS   =  $(SAFE_CXXFLAGS)

#==============================================================================
# Debug builds
#==============================================================================

++  *                       _    DBG_CFLAGS    =
++  *                       _    DBG_CXXFLAGS  =
++  *                       _    DBG_LDFLAGS   =


!!  unix-*-*-*-*-*          dbg  DBG_CFLAGS    =  -g
!!  unix-*-*-*-*-*          dbg  DBG_CXXFLAGS  =  -g

!!  unix-sunos-*-*-*-*      dbg  DBG_CXXFLAGS  =  -g0
!!  unix-sunos-*-*-cc-5.9   dbg  DBG_CXXFLAGS  =  -g0 -xdebugformat=stabs

!!  unix-aix-*-*-*-*        dbg  DBG_CXXFLAGS  =  -g
!!  unix-aix-*-*-xlc-10.0   dbg  DBG_CXXFLAGS  =  -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug  -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline

!!  unix-aix-*-*-xlc-10.1   dbg  DBG_CXXFLAGS  =  -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug:stepOverInline -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline
!!  unix-aix-*-*-xlc-11.1   dbg  DBG_CXXFLAGS  =  -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug:stepOverInline -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline
!!  unix-aix-*-*-xlc-13.1   dbg  DBG_CXXFLAGS  =  -qxflag=v6align -g -qxflag=inlinewithdebug:stepOverInline -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline

!!  unix-*-*-*-gcc-*        dbg  DBG_CXXFLAGS  =  -g
!!  unix-*-*-*-clang-*      dbg  DBG_CXXFLAGS  =  -g

!!  windows-*-*-*-cl-15.00  _    DBG_CXXFLAGS  =  /Zi
!!  windows-*-*-*-cl-15.00  _    DBG_CFLAGS    =  /Zi

!!  windows-*-*-*-*-*       dbg  DBG_LDFLAGS   =  /debug

# This is only required by bde_build, for MDd/MD and MTd/MT builds.
# TODO: move the 2 rules below into default_interal.opts
++  windows   _    DBG_LIBSUFFIX  =
++  windows   dbg  DBG_LIBSUFFIX  =  d


++  *         _    BDE_CFLAGS     =  $(DBG_CFLAGS)
++  *         _    BDE_CXXFLAGS   =  $(DBG_CXXFLAGS)
++  *         _    BDE_LDFLAGS    =  $(DBG_LDFLAGS)

#==============================================================================
# Optimized builds
#==============================================================================

++  *  _  OPT_CFLAGS    =
++  *  _  OPT_CXXFLAGS  =
++  *  _  OPT_LDFLAGS   =


!!  unix-*-*-*-*-*              opt  OPT_CFLAGS    =  -O -DNDEBUG
!!  unix-*-*-*-gcc-*            opt  OPT_CFLAGS    =  -O2 -fno-strict-aliasing -DNDEBUG
!!  unix-*-*-*-clang-*          opt  OPT_CFLAGS    =  -O2 -fno-strict-aliasing -DNDEBUG
!!  unix-linux-powerpc-*-gcc-*  opt  OPT_CFLAGS    =  -O2 -DNDEBUG

!!  unix-*-*-*-*-*              opt  OPT_CXXFLAGS  =  -O -DNDEBUG
!!  unix-*-*-*-gcc-*            opt  OPT_CXXFLAGS  =  -O2 -fno-gcse -fno-strict-aliasing -DNDEBUG
!!  unix-*-*-*-clang-*          opt  OPT_CXXFLAGS  =  -O2 -fno-strict-aliasing -DNDEBUG
!!  unix-linux-powerpc-*-gcc-*  opt  OPT_CXXFLAGS  =  -O2 -DNDEBUG
!!  unix-sunos-*-*-cc-*         opt  OPT_CXXFLAGS  =  -O -DNDEBUG -xbuiltin=%all
!!  unix-aix-*-*-xlc-*          opt  OPT_CXXFLAGS  =  -O -DNDEBUG
!!  unix-aix-*-*-xlc-10.1       opt  OPT_CXXFLAGS  =  -O -DNDEBUG -qalias=noansi -qlanglvl=staticstoreoverlinkage
!!  unix-aix-*-*-xlc-11.1       opt  OPT_CXXFLAGS  =  -O -DNDEBUG -qalias=noansi -qlanglvl=staticstoreoverlinkage
++  unix-aix-*-*-xlc-11.2       opt  OPT_CXXFLAGS  =  -qmaxmem=-1
!!  unix-aix-*-*-xlc-13.1       opt  OPT_CXXFLAGS  =  -O -DNDEBUG -qlanglvl=staticstoreoverlinkage

# DRQS 16407776: Studio 12 switched the meaning of -O from -xO2 to -xO3 - we
# want to use -xO3 explicitly to match plink.
!!  unix-sunos-*-*-cc-5.9   opt  OPT_CFLAGS             =  -xO3 -DNDEBUG
# DRQS 57720228: Remove prefetch option
!!  unix-sunos-*-*-cc-5.9   opt  OPT_CXXFLAGS           =  -xO3 -DNDEBUG -xbuiltin=%all

!!  windows-                opt  OPT_CXXFLAGS           =  /O2 /Ob1 /Oi /Ot /Gs /GF /Gy /D"NDEBUG"
# this is actually a shorter version of the above, plus buffer overflow checks
# disabled, plus fiber-safe TLS enabled.
!!  windows-*-*-*-cl-15.00  opt  OPT_CXXFLAGS           =  /O2 /Ob1 /GS- /GT /DNDEBUG
!!  windows-*-*-*-cl-16.00  opt  OPT_CXXFLAGS           =  /O2 /Ob1 /GS- /GT /DNDEBUG

!!  windows                 opt  OPT_LDFLAGS            =  /nod:msvcrtd
# The option above is actually unacceptable, and necessary only due to linking
# with improperly built third-party libraries. Let's disable it for newer
# VS2008 builds.  It would also make sense to add /OPT:REF and /OPT:ICF for
# building applications, but not test drivers. Test driver link time is too
# long already without linker optimizations.
!!  windows-*-*-*-cl-15.00  opt  OPT_LDFLAGS            =
!!  windows-*-*-*-cl-16.00  opt  OPT_LDFLAGS            =


++  *  _  BDE_CFLAGS    =  $(OPT_CFLAGS)
++  *  _  BDE_CXXFLAGS  =  $(OPT_CXXFLAGS)
++  *  _  BDE_LDFLAGS   =  $(OPT_LDFLAGS)

#==============================================================================
# NDEBUG builds
#==============================================================================

++  *      _       NDEBUG_CFLAGS    =
++  *      _       NDEBUG_CXXFLAGS  =

++  unix-  ndebug  NDEBUG_CFLAGS    =  -DNDEBUG
++  unix-  ndebug  NDEBUG_CXXFLAGS  =  -DNDEBUG

++  *      _       BDE_CFLAGS       =  $(NDEBUG_CFLAGS)
++  *      _       BDE_CXXFLAGS     =  $(NDEBUG_CXXFLAGS)

#==============================================================================
# Threaded builds
#==============================================================================

++  *  _  MT_CFLAGS    =
++  *  _  MT_CXXFLAGS  =
++  *  _  MT_LDFLAGS   =

++  unix-               mt       MT_CFLAGS    =  -D_REENTRANT

!!  unix-sunos-*-*-*    mt       MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -mt
!!  unix-aix-*-*-*      mt       MT_CXXFLAGS  =  -D_THREAD_SAFE -qthreaded -D_REENTRANT
!!  unix-*-*-*-gcc      mt       MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT
!!  unix-*-*-*-clang    mt       MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT
!!  unix-sunos-*-*-gcc  mt       MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -pthreads

# On SUN, we need to add -D_PTHREADS to compile in safe mode (don't know why).
!!  unix-sunos-*-*-*    mt_safe  MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -mt -D_PTHREADS
!!  unix-sunos-sparc-*-gcc  mt_safe  MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_PTHREADS -pthreads
!!  unix-aix-*-*-gcc    mt_safe  MT_CXXFLAGS  =  -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_PTHREADS

# see SHR_CXXFLAGS and DBG_LIBSUFFIX; forced to T in bce.opts and bte.opts
++  windows             _        MT_LIBTYPE   =  L
!!  windows             mt       MT_LIBTYPE   =  T

!!  unix-sunos-*-*-*    mt       MT_LDFLAGS   =  -Bdynamic -mt $(SHR_PRELDFLAGS)
!!  unix-aix-*-*-*      mt       MT_LDFLAGS   =  -bdynamic -lpthread $(SHR_PRELDFLAGS) -qthreaded
!!  unix-*-*-*-gcc      mt       MT_LDFLAGS   =  -lthread
!!  unix-*-*-*-clang    mt       MT_LDFLAGS   =  -lthread
!!  unix-sunos-*-*-gcc  mt       MT_LDFLAGS   =  -lthread
!!  unix-aix-*-*-gcc    mt       MT_LDFLAGS   =  -lpthread
!!  unix-linux-*-*-*    mt       MT_LDFLAGS   =  -lpthread
!!  unix-darwin-*-*-*   mt       MT_LDFLAGS   =  -lpthread
!!  unix-freebsd-*-*-*  mt       MT_LDFLAGS   =  -lpthread

++  *  _  BDE_CFLAGS    =  $(MT_CFLAGS)
++  *  _  BDE_CXXFLAGS  =  $(MT_CXXFLAGS)
++  *  _  BDE_LDFLAGS   =  $(MT_LDFLAGS)

#==============================================================================
# Warning and Errors
#==============================================================================
# Regular Compiler

# Flags used by cscompile/glint and supported by gcc 4.3.2 (split into those supported
# by gcc 3.4.3, then by those supported by gcc 4+):

*-*-*-*-gcc _  GCCEXTRAWFLAGS  = -Wcast-align -Wcast-qual \
    -Wall -Wextra -Wformat-security -Wformat-y2k -Winit-self \
    -Wno-long-long -Wno-unknown-pragmas \
    -Wpacked -Wpointer-arith \
    -Wwrite-strings -Wno-unused-value -Wno-char-subscripts -Wsign-compare \
    -Wparentheses

*-*-*-*-gcc-4.2 _  GCCEXTRAWFLAGS  = -Wlogical-op -Wstrict-overflow=1 -Wvla \
    -Wvolatile-register-var -fdiagnostics-show-option

*-*-*-*-clang _  GCCEXTRAWFLAGS  = -Wcast-align -Wcast-qual \
    -Wall -Wextra -Wformat-security -Wformat-y2k -Winit-self \
    -Wno-long-long -Wno-unknown-pragmas \
    -Wpacked -Wpointer-arith \
    -Wwrite-strings -Wno-unused-value -Wno-char-subscripts -Wsign-compare \
    -Wparentheses -Wstrict-overflow=1 -Wvla \
    -Wvolatile-register-var -fdiagnostics-show-option

# Once the DRQS 22615679 warnings are cleaned up, we can reconsider making this
# error= to force these 64-bit portability warnings to be treated as errors.
#unix-sunos-*-*-gcc  64  GCCEXTRAWERROR  = error=
*-*-*-*-gcc       _  GCCEXTRAWERROR  =
*-*-*-*-clang     _  GCCEXTRAWERROR  =

*-*-*-*-gcc-4.2   _  GCCEXTRAWFLAGS  =   \
     -Wno-sign-conversion -W$(GCCEXTRAWERROR)conversion -W$(GCCEXTRAWERROR)address \
     -W$(GCCEXTRAWERROR)type-limits -W$(GCCEXTRAWERROR)cast-align           \
     -W$(GCCEXTRAWERROR)sign-compare -W$(GCCEXTRAWERROR)format              \
     -W$(GCCEXTRAWERROR)overflow                                            \
     -W$(GCCEXTRAWERROR)larger-than-100000

*-*-*-*-gcc-4.3   _  GCCEXTRAWFLAGS  =  -Werror=cast-qual

###############################################################################
# ABI-bitness
###############################################################################

++  *-*-*-*-*-*                  _   CC64FLAGS  =
!!  unix-*-x86_64-*-gcc-*        _   CC64FLAGS  =  -m32 -march=pentium2 -mtune=opteron
!!  unix-*-x86_64-*-gcc-*        64  CC64FLAGS  =  -m64 -mtune=opteron
!!  unix-linux-powerpc-*-gcc-*   _   CC64FLAGS  =  -m32 -mcpu=power7 -mhard-dfp
!!  unix-linux-powerpc-*-gcc-*   64  CC64FLAGS  =  -m64 -mcpu=power7 -mhard-dfp
!!  unix-*-*-*-clang-*           _   CC64FLAGS  =  -m32
!!  unix-*-*-*-clang-*           64  CC64FLAGS  =  -m64
!!  unix-*-x86_64-*-clang-*      _   CC64FLAGS  =  -m32 -march=pentium2 -mtune=opteron
!!  unix-*-x86_64-*-clang-*      64  CC64FLAGS  =  -m64 -mtune=opteron
!!  unix-sunos-*-*-gcc-*         _   CC64FLAGS  =  -m32
!!  unix-sunos-*-*-gcc-*         64  CC64FLAGS  =  -m64
!!  unix-aix-*-*-gcc-*           _   CC64FLAGS  =  -maix32
!!  unix-aix-*-*-gcc-*           64  CC64FLAGS  =  -maix64
++  unix-aix-*-*-xlc-*           64  CC64FLAGS  =  -q64

!!  unix-sunos-sparc-*-cc-5.9    64  CC64FLAGS  =  -m64 -xtarget=generic

# DRQS 17197057 -- make -fPIC the default for 64-bit Linux builds on x86_64
++  unix-linux-x86_64-*-gcc-*    64  CC64FLAGS  =  -fPIC
++  unix-linux-x86_64-*-clang-*  64  CC64FLAGS  =  -fPIC

++  *  _  CXX64FLAGS =  $(CC64FLAGS)

###############################################################################
# pic, stlport, and others
###############################################################################

# DRQS 22147649 -- allow PIC builds for static libs under SunOS
++  unix-sunos-sparc-*-cc-*  pic      BDE_CXXFLAGS  =  -xcode=pic32
++  unix-sunos-sparc-*-cc-*  pic      BDE_CFLAGS    =  -xcode=pic32

# enable support for building with the Sun supplied version of STLPort as the
# default implementation of the Standard Library
++  unix-sunos-*-*-cc-*      stlport  BDE_CXXFLAGS  =  -library=stlport4 -template=no%extdef
++  unix-sunos-*-*-cc-*      stlport  BDE_LDFLAGS   =  -library=stlport4

# DRQS 29644737 - disable BSLS_IDENT to save space in bigs
++  *-*-*-*-*-*              _        BDE_CXXFLAGS  =  $(SWITCHCHAR)DBSLS_IDENT_OFF

###############################################################################
# CC and CXX
###############################################################################
# This section was originally used by bde_build to determine compiler
# locations, which are indicated by the first word of the variables CC and CXX.
# Waf ignores the compiler location part of the variables, but it still takes
# in account of the complier flags within these variables.

++  unix-*-*-*-*-*           _  CC   =  cc -DUSE_REAL_MALLOC $(CC64FLAGS)
++  unix-*-*-*-*-*           _  CXX  =  CC $(CXX64FLAGS)
!!  unix-linux-*-*-gcc-*     _  CC   =  gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS)
!!  unix-darwin-*-*-clang-*  _  CC   =  clang -DUSE_REAL_MALLOC -D__unix $(CC64FLAGS)

# The section below should probably be moved to another section for CXXFLAGS
# xlc 10 August PTF - All settings are identical to xlc-10.0 except for XLC_LOCATION
# xlc 11 January 2011 PTF - All settings are identical to xlc-10.0 except for XLC_LOCATION
!!  unix-aix-*-*-xlc-10.1     _    DEF_CXXFLAGS       =  $(ARCH_TUNE) -qnotempinc -qfuncsect -qtbtable=small -qrtti=all -qsuppress=1500-029 -qsuppress=1540-2910 -qsuppress=1501-201 -qxflag=tocrel -qxflag=dircache:71,100 $(ENABLE_TLS) $(AIX_UNLOCK_STREAMS)
++  unix-aix-*-*-xlc-11.1     _    DEF_CXXFLAGS       =  -qdebug=nparseasm
# Note: must be the very last option for AIX/xlC/DEF_CXXFLAGS, to avoid
# overriding it with other options
++  unix-aix-*-*-xlc-         _    DEF_CXXFLAGS       =  -qxflag=UnwindTypedefInClassDecl

!!  unix-aix-*-*-xlc          _    CC                 =  xlc_r $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!!  unix-aix-*-*-xlc          _    CXX                =  xlC_r $(CXX64FLAGS)

!!  unix-aix-*-*-xlc-10.0     _    CC                 =  xlc_r $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!!  unix-aix-*-*-xlc-10.0     _    CXX                =  xlC_r $(CXX64FLAGS)

!!  unix-aix-*-*-xlc-10.1     _    CC                 =  xlc_r $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType $(XLC_QPATH)
!!  unix-aix-*-*-xlc-10.1     _    CXX                =  xlC_r $(CXX64FLAGS) -qxflag=NoKeepDebugMetaTemplateType $(XLC_QPATH)

!!  unix-aix-*-*-xlc-11.1     _    CC                 =  xlC_r $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!!  unix-aix-*-*-xlc-11.1     _    CXX                =  xlC_r $(CXX64FLAGS) -qxflag=NoKeepDebugMetaTemplateType

!!  unix-aix-*-*-gcc          _    CC                 =  gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!!  unix-aix-*-*-gcc          _    CXX                =  g++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS) -ftemplate-depth-150

!!  unix-sunos-*-*-cc-5.9     _    CC                 =  cc $(CC64FLAGS)
!!  unix-sunos-*-*-cc-5.9     _    CXX                =  CC $(CXX64FLAGS)

!!  unix-sunos-*-*-gcc        _    CC                 =  gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!!  unix-sunos-*-*-gcc        _    CXX                =  g++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS) -ftemplate-depth-150

!!  unix-linux-*-*-gcc        _    CC                 =  gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!!  unix-linux-*-*-clang      _    CC                 =  gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!!  unix-linux-*-*-gcc        _    CXX                =  g++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS)
!!  unix-linux-*-*-clang      _    CXX                =  g++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS)

!!  windows-*-*-*-cl-15.00    _    CC                 =  cl /TC $(CC64FLAGS)
!!  windows-*-*-*-cl-16.00    _    CC                 =  cl /TC $(CC64FLAGS)
!!  windows-*-*-*-cl-15.00    _    CXX                =  cl /TP $(CXX64FLAGS)
!!  windows-*-*-*-cl-16.00    _    CXX                =  cl /TP $(CXX64FLAGS)

# for development only; use Clang instead of gcc
!!  unix-linux-*-*-clang      _    CLANG_GCC_VER_CPP  =  -D__CLANG_GNUC__=4 -D__CLANG_GNUC_MINOR__=7 -D__CLANG_GNUC_PATCHLEVEL__=0
!!  unix-darwin-*-*-*         _    CLANG_GCC_VER_CPP  =  -D__CLANG_GNUC__=4 -D__CLANG_GNUC_MINOR__=2 -D__CLANG_GNUC_PATCHLEVEL__=1
!!  unix-linux-*-*-clang      _    CLANG_PATH         =  clang
!!  unix-linux-*-*-clang      _    CLANGXX_PATH       =  clang++

!!  unix-linux-*-*-clang      _    CC                 =  clang -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) $(CLANG_GCC_VER_CPP)
!!  unix-linux-*-*-clang      64   CC                 =  clang -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) $(CLANG_GCC_VER_CPP)
!!  unix-linux-*-*-clang      _    CXX                =  clang++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS) $(CLANG_GCC_VER_CPP)
!!  unix-linux-*-*-clang      64   CXX                =  clang++ $(GCCEXTRAWFLAGS) $(CXX64FLAGS) $(CLANG_GCC_VER_CPP)
!!  unix-darwin-*-*-clang     _    CXX                =  clang++ -D__unix $(CXX64FLAGS) $(CLANG_GCC_VER_CPP)

++  unix-                     _    CXXLINK            =  $(CXX)
++  unix-                     _    CLINK              =  $(CXXLINK)
++  windows-                  _    CXXLINK            =  link /nologo /incremental:no /subsystem:console /machine:ix86 ws2_32.lib
!!  windows-                 64    CXXLINK            =  link /nologo /incremental:no /subsystem:console /machine:X64 ws2_32.lib
++  windows-                  _    CLINK              =  $(CXXLINK)

#==============================================================================
# User Customisation
#==============================================================================

# add to front
--  *  _  BDE_INCLUDE        =  $(USER_INCLUDE)
--  *  _  BDE_CFLAGS         =  $(USER_CFLAGS)
--  *  _  BDE_CXXFLAGS       =  $(USER_CXXFLAGS)

# add to back
++  *  _  BDE_INCLUDE        =  $(USER_ENDINCLUDE)
++  *  _  BDE_CFLAGS         =  $(USER_ENDCFLAGS)
++  *  _  BDE_CXXFLAGS       =  $(USER_ENDCXXFLAGS)

# the link line is more involved...
++  *  _  BDE_PRELDFLAGS     =  $(USER_PRELDFLAGS)
--  *  _  BDE_LDFLAGS        =  $(USER_LDFLAGS)
++  *  _  BDE_ENDLDFLAGS     =  $(USER_ENDLDFLAGS)

#==============================================================================
# Add universal include paths to C and C++ specific include paths

++  *  _  BDE_CXXINCLUDE     =  $(BDE_INCLUDE)
++  *  _  BDE_CINCLUDE       =  $(BDE_INCLUDE)

#==============================================================================
# flags repatriated from bde_build.pl

++  *  _  BDEBUILD_CFLAGS    =  $(BDE_CINCLUDES) $(BDE_CFLAGS)
++  *  _  BDEBUILD_CXXFLAGS  =  $(BDE_CXXINCLUDES) $(BDE_CXXFLAGS)
++  *  _  BDEBUILD_LDFLAGS   =  $(BDE_PRELDFLAGS) $(BDE_LIBS) $(BDE_LDFLAGS) $(PREBUILT_LIBS) $(BDE_ENDLDFLAGS)

#==============================================================================
# !!!!! S P E C I A L    V A R I A B L E S !!!!!
# These variables are OVERRIDE-ONLY.
#
# !! must always be specified
#
# They are intended to be used to make last-ditch changes to flags to allow
# components or test drivers to build for a difficult platform, in exceptional
# cases.
#
#   ***  DO  NOT  APPEND  TO  THESE  VARIABLES    ***
#   ***  THEY  ARE  INTENDED  TO  BE  OVERWRITTEN ***

!! *       _   COMPONENT_BDEBUILD_CFLAGS      = $(BDEBUILD_CFLAGS)
!! *       _   COMPONENT_BDEBUILD_CXXFLAGS    = $(BDEBUILD_CXXFLAGS)
!! *       _   COMPONENT_BDEBUILD_LDFLAGS     = $(BDEBUILD_LDFLAGS)

!! *       _   TESTDRIVER_BDEBUILD_CFLAGS     = $(BDEBUILD_CFLAGS)
!! *       _   TESTDRIVER_BDEBUILD_CXXFLAGS   = $(BDEBUILD_CXXFLAGS)
!! *       _   TESTDRIVER_BDEBUILD_LDFLAGS    = $(BDEBUILD_LDFLAGS)
